{"version":3,"sources":["consts/consts.js","components/TranslatorTable/components/TableHead/TableHead.js","components/TranslatorTable/TranslatorTable.js","components/TranslatorOptions/TranslatorOptions.js","components/TranslatorActions/TranslatorActions.js","components/TranslatorModal/TranslatorModal.js","utils/translate.js","utils/formatters.js","components/TranslatorOutput/TranslatorOutput.js","containers/Translator/Translator.js","App.js","serviceWorker.js","index.js"],"names":["defaultColumns","name","width","defaultActions","langSettings","defaultLanguages","code","key","setting","useStyles","makeStyles","theme","row","display","alignItems","label","fontSize","radio","padding","TableHead","source","languages","onSettingChange","classes","defCols","map","col","TableCell","style","minWidth","langCols","className","FormControl","component","FormLabel","RadioGroup","aria-label","value","onChange","e","target","item","FormControlLabel","control","Radio","disabled","root","cols","TableRow","overflow","cellCol","flexDirection","prevText","color","numColumns","length","TranslatorTable","translations","console","log","translationsRows","action","translationData","originalData","index","text","cell","noData","colSpan","Typography","align","Table","TableBody","formControl","marginTop","spacing","marginBottom","TranslatorOptions","onSourceChange","copySource","onCopySourceChange","fileType","setFileType","srcOptions","MenuItem","TextField","variant","InputLabel","id","Select","labelId","justifyContent","btn","margin","verticalAlign","TranslatorActions","onOpenModal","onExport","Button","onClick","input","TranslatorModal","isModal","modalData","setIsModal","onAddTranslation","handleClose","useState","state","setState","loadedData","setLoadedData","useEffect","newOriginalData","lang","loadedItem","find","language_id","loadedText","languages_translations_value","onLangChange","property","newData","langId","findIndex","el","handleFiles","files","a","file","reader","FileReader","addEventListener","allLoadedTableData","JSON","parse","result","data","readAsText","Dialog","open","onClose","aria-labelledby","aria-describedby","fullWidth","DialogTitle","DialogContent","InputLabelProps","shrink","placeholder","fileTypes","DialogActions","translate","sourceText","sourceLang","targetLang","Promise","resolve","reject","url","encodeURI","fetch","then","response","json","responseData","translatedText","formatInsertQuery","languageId","languageName","translationKey","translationValue","formatUpdateQuery","formatDeleteQuery","keys","formattedKeys","join","returnQueryBlock","queries","joinedQueries","returnFunction","blocks","joinedBlocks","textarea","title","TranslatorOutput","output","Fab","size","copy","TextareaAutosize","rowsMin","defaultModalData","Translator","props","setSource","setCopySource","setLanguages","setTranslations","setModalData","setOutput","newLanguages","modalTranslationData","src","srcText","pendingTranslationData","langModalData","all","rawTranslationData","copySourceTxt","filter","newModalData","upBlocks","downBlocks","insertedKeys","trans","transUpQueries","transDownQueries","push","newQuery","forEach","originalLang","newUpQuery","newDownQuery","deleteInsertedBlock","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2d59c67c.chunk.js","sourcesContent":["export const defaultColumns = [{ name: \"action\" }, { name: \"key\", width: 150 }];\n\nexport const defaultFileType = \".php\";\n\nexport const defaultSource = \"pl\";\n\nexport const defaultCopySource = \"en\";\n\nexport const defaultActions = [\"INSERT\", \"UPDATE\"];\n\nexport const langSettings = [\"input\", \"auto\", \"copy\"];\n\nexport const defaultLanguages = [\n  {\n    name: \"polish\",\n    code: \"pl\",\n    key: 1,\n    setting: \"input\",\n  },\n  {\n    name: \"english\",\n    code: \"en\",\n    key: 9,\n    setting: \"input\",\n  },\n  {\n    name: \"espanol\",\n    code: \"es\",\n    key: 11,\n    setting: \"copy\",\n  },\n  {\n    name: \"french\",\n    code: \"fr\",\n    key: 12,\n    setting: \"copy\",\n  },\n  {\n    name: \"german\",\n    code: \"de\",\n    key: 10,\n    setting: \"copy\",\n  },\n  {\n    name: \"norwegian\",\n    code: \"no\",\n    key: 14,\n    setting: \"copy\",\n  },\n  {\n    name: \"russian\",\n    code: \"ru\",\n    key: 13,\n    setting: \"copy\",\n  },\n  {\n    name: \"swedish\",\n    code: \"sv\",\n    key: 15,\n    setting: \"copy\",\n  },\n  {\n    name: \"czech\",\n    code: \"cs\",\n    key: 16,\n    setting: \"copy\",\n  },\n  {\n    name: \"slovak\",\n    code: \"sk\",\n    key: 17,\n    setting: \"copy\",\n  },\n  {\n    name: \"italian\",\n    code: \"it\",\n    key: 18,\n    setting: \"copy\",\n  },\n  {\n    name: \"hungarian\",\n    code: \"hu\",\n    key: 19,\n    setting: \"copy\",\n  },\n];\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport {\n  TableRow,\n  TableCell,\n  TableHead as MuiTableHead,\n  FormControlLabel,\n  Checkbox,\n  FormControl,\n  FormLabel,\n  RadioGroup,\n  Radio,\n} from \"@material-ui/core\";\nimport { defaultColumns, langSettings } from \"consts/consts\";\n\nconst useStyles = makeStyles((theme) => ({\n  row: {\n    display: \"flex\",\n    alignItems: \"center\",\n  },\n  label: {\n    fontSize: 10,\n  },\n  radio: {\n    padding: 4,\n  }\n}));\n\nconst TableHead = ({ source, languages, onSettingChange }) => {\n  const classes = useStyles();\n\n  const defCols = defaultColumns.map((col) => (\n    <TableCell\n      style={{ minWidth: col.width ? col.width : \"auto\" }}\n      key={`col-${col.name}`}\n    >\n      {col.name}\n    </TableCell>\n  ));\n  const langCols = languages.map(({ name, key, code, setting }) => (\n    <TableCell key={`col-${name}`}>\n      <div>\n        <div className={classes.row}>\n          {/* <div className={classes.langTitle}>{name}</div> */}\n          <FormControl component=\"fieldset\">\n            <FormLabel component=\"legend\">{name}</FormLabel>\n            <RadioGroup\n              aria-label=\"gender\"\n              name=\"gender1\"\n              value={setting}\n              onChange={(e) => onSettingChange(key, e.target.value)}\n            >\n              {langSettings.map((item) => (\n                <FormControlLabel\n                  key={`radio-${item}`}\n                  value={item}\n                  control={<Radio\n                    disabled={code === source}\n                    classes={{\n                      root: classes.radio,\n                    }}\n                  />}\n                  label={item}\n                  classes={{\n                    label: classes.label,\n                  }}\n                />\n              ))}\n            </RadioGroup>\n          </FormControl>\n          {/* <FormControlLabel\n            control={\n              <Checkbox\n                checked={autoTranslate}\n                disabled={code === source}\n                onChange={() =>\n                  onSettingChange(key, \"autoTranslate\", !autoTranslate)\n                }\n                name=\"source\"\n                color=\"primary\"\n                size=\"small\"\n              />\n            }\n            label=\"auto\"\n            labelPlacement=\"top\"\n            classes={{\n              label: classes.label,\n            }}\n          /> */}\n        </div>\n      </div>\n    </TableCell>\n  ));\n  const cols = [...defCols, ...langCols];\n\n  return (\n    <MuiTableHead className=\"TableHead\">\n      <TableRow>{cols}</TableRow>\n    </MuiTableHead>\n  );\n};\n\nexport default TableHead;\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport {\n  Typography,\n  Table,\n  TableBody,\n  TableRow,\n  TableCell,\n} from \"@material-ui/core\";\nimport TableHead from \"./components/TableHead/TableHead\";\nimport { defaultColumns, defaultLanguages } from \"consts/consts\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: \"100%\",\n    overflow: \"auto\",\n  },\n  cellCol: {\n    display: \"flex\",\n    flexDirection: \"column\"\n  },\n  prevText: {\n    color: 'grey',\n  }\n}));\n\nconst numColumns = defaultColumns.length + defaultLanguages.length;\n\nconst TranslatorTable = ({\n  source,\n  languages,\n  onSettingChange,\n  translations,\n}) => {\n  const classes = useStyles();\n\n  console.log(translations);\n\n  const translationsRows = translations.map(\n    ({ action, key, translationData, originalData }) => (\n      <TableRow key={`row-${key}`}>\n        <TableCell>{action}</TableCell>\n        <TableCell>{key}</TableCell>\n        {translationData.map(({ text, code }, index) => {\n          let cell = <TableCell key={`${key}-${code}`}>{text}</TableCell>;\n          if (originalData.length > 0) {\n            const prevText = originalData[index].text;\n            cell = (\n              <TableCell key={`${key}-${code}`}>\n                <div className={classes.cellCol}>\n                  <div>{text}</div>\n                  <div className={classes.prevText}>{prevText}</div>\n                </div>\n              </TableCell>\n            );\n          }\n          return cell;\n        })}\n      </TableRow>\n    )\n  );\n\n  const noData = (\n    <TableRow>\n      <TableCell colSpan={numColumns}>\n        <Typography align=\"center\">\n          <em>No data</em>\n        </Typography>\n      </TableCell>\n    </TableRow>\n  );\n\n  return (\n    <div className={classes.root}>\n      <Table>\n        <TableHead {...{ source, languages, onSettingChange }}></TableHead>\n        <TableBody>\n          {translations.length === 0 ? noData : translationsRows}\n        </TableBody>\n      </Table>\n    </div>\n  );\n};\n\nexport default TranslatorTable;\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport {\n  TextField,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Typography,\n} from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme) => ({\n  formControl: {\n    minWidth: 200,\n  },\n  text: {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(2),\n  },\n}));\n\nconst TranslatorOptions = ({\n  languages,\n  source,\n  onSourceChange,\n  copySource,\n  onCopySourceChange,\n  fileType,\n  setFileType,\n}) => {\n  const classes = useStyles();\n\n  const srcOptions = languages.map(({ name, code }) => (\n    <MenuItem key={`item-${code}`} value={code}>\n      {name}\n    </MenuItem>\n  ));\n\n  return (\n    <div className=\"TranslatorOptions\">\n      <Typography className={classes.text}>General settings</Typography>\n      <TextField\n        label=\"File type\"\n        variant=\"outlined\"\n        value={fileType}\n        onChange={(e) => {\n          setFileType(e.target.value);\n        }}\n      />\n\n      <Typography className={classes.text}>Translation options</Typography>\n      <FormControl variant=\"outlined\" className={classes.formControl}>\n        <InputLabel id=\"translation-src-label\">translation source</InputLabel>\n        <Select\n          labelId=\"translation-src-label\"\n          id=\"translation-src\"\n          value={source}\n          onChange={(e) => onSourceChange(e.target.value)}\n          label=\"translation source\"\n        >\n          {srcOptions}\n        </Select>\n      </FormControl>\n\n      <FormControl variant=\"outlined\" className={classes.formControl}>\n        <InputLabel id=\"copy-src-label\">copy source</InputLabel>\n        <Select\n          labelId=\"copy-src-label\"\n          id=\"copy-src\"\n          value={copySource}\n          onChange={(e) => onCopySourceChange(e.target.value)}\n          label=\"copy source\"\n        >\n          {srcOptions}\n        </Select>\n      </FormControl>\n    </div>\n  );\n};\n\nexport default TranslatorOptions;\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Button } from \"@material-ui/core\";\nimport Add from \"@material-ui/icons/Add\";\nimport Save from \"@material-ui/icons/Save\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"flex\",\n    justifyContent: \"center\",\n  },\n  btn: {\n    display: \"block\",\n    margin: theme.spacing(2),\n    \"& svg\": {\n      verticalAlign: \"middle\",\n    },\n  },\n}));\n\nconst TranslatorActions = ({ onOpenModal, onExport }) => {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        className={classes.btn}\n        onClick={onOpenModal}\n      >\n        Add text\n        <Add />\n      </Button>\n      <Button\n        variant=\"outlined\"\n        color=\"primary\"\n        className={classes.btn}\n        onClick={onExport}\n      >\n        Export\n        <Save />\n      </Button>\n    </div>\n  );\n};\n\nexport default TranslatorActions;\n","import React, { useState, useEffect } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogContentText,\n  DialogActions,\n  Button,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  TextField,\n  Typography,\n} from \"@material-ui/core\";\nimport { defaultActions } from \"consts/consts\";\nimport ReactFileReader from \"react-file-reader\";\n\nconst useStyles = makeStyles((theme) => ({\n  input: {\n    marginBottom: theme.spacing(2),\n  },\n}));\n\nconst TranslatorModal = ({\n  isModal,\n  modalData,\n  setIsModal,\n  onAddTranslation,\n}) => {\n  const classes = useStyles();\n\n  const handleClose = () => {\n    setIsModal(false);\n  };\n\n  const [state, setState] = useState(modalData);\n  const [loadedData, setLoadedData] = useState([]);\n\n  useEffect(() => {\n    setState(modalData);\n  }, [modalData]);\n\n  useEffect(() => {\n    if (loadedData.length > 0) {\n      const newOriginalData = state.originalData.map((lang) => {\n        const loadedItem = loadedData.find(\n          (item) => item.language_id == lang.key\n        )\n        console.log(loadedItem)\n        const loadedText = loadedItem?.languages_translations_value;\n\n        return {\n          ...lang,\n          text: loadedText,\n        };\n      });\n      setState({ ...state, originalData: newOriginalData });\n      console.log('set', newOriginalData)\n    }\n  }, [loadedData]);\n\n  const { action, key, translationData, originalData } = state;\n\n  const onActionChange = (e) => {\n    setState({ ...state, action: e.target.value });\n  };\n\n  const onKeyChange = (e) => {\n    setState({ ...state, key: e.target.value });\n  };\n\n  const onLangChange = (e, property, key) => {\n    const newData = [...state[property]];\n    const langId = newData.findIndex((el) => el.key === key);\n\n    newData[langId] = {\n      ...newData[langId],\n      text: e.target.value,\n    };\n\n    setState({\n      ...state,\n      [property]: newData,\n    });\n  };\n\n  const handleSave = () => {\n    onAddTranslation(state);\n  };\n\n  const handleFiles = async (files) => {\n    const file = files[0];\n    const reader = new FileReader();\n\n    reader.addEventListener(\n      \"load\",\n      function () {\n        const allLoadedTableData = JSON.parse(reader.result);\n        setLoadedData(allLoadedTableData[2]?.data);\n      },\n      false\n    );\n\n    if (file) {\n      reader.readAsText(file);\n    }\n  };\n\n  return (\n    <Dialog\n      open={isModal}\n      onClose={handleClose}\n      aria-labelledby=\"alert-dialog-title\"\n      aria-describedby=\"alert-dialog-description\"\n      fullWidth\n    >\n      <DialogTitle id=\"alert-dialog-title\">\n        Fill the translation data\n      </DialogTitle>\n      <DialogContent>\n        <FormControl variant=\"outlined\" className={classes.input} fullWidth>\n          <InputLabel id=\"query-action-type-label\">\n            translation source\n          </InputLabel>\n          <Select\n            labelId=\"query-action-type-label\"\n            id=\"query-action-type\"\n            value={action}\n            onChange={onActionChange}\n            label=\"Action type\"\n          >\n            {defaultActions.map((action) => (\n              <MenuItem key={`action-${action}`} value={action}>\n                {action}\n              </MenuItem>\n            ))}\n          </Select>\n        </FormControl>\n        <TextField\n          className={classes.input}\n          label=\"key\"\n          InputLabelProps={{\n            shrink: true,\n          }}\n          placeholder=\"Type translation key\"\n          variant=\"outlined\"\n          value={key}\n          onChange={onKeyChange}\n          fullWidth\n        />\n        {state.action === \"UPDATE\" && (\n          <>\n            <Typography>Original values</Typography>\n            {/* <input type=\"file\" id=\"input\" /> */}\n            <ReactFileReader fileTypes={[\".json\"]} handleFiles={handleFiles}>\n              <button className=\"btn\">Upload</button>\n            </ReactFileReader>\n            {originalData.map(({ name, text, key, code }) => (\n              <TextField\n                key={`modal-input-${code}`}\n                className={classes.input}\n                label={name}\n                InputLabelProps={{\n                  shrink: true,\n                }}\n                placeholder={`Type ${name} text`}\n                variant=\"outlined\"\n                value={text}\n                onChange={(e) => onLangChange(e, \"originalData\", key)}\n                fullWidth\n              />\n            ))}\n            <Typography>Updated values</Typography>\n          </>\n        )}\n        {translationData.map(({ name, text, key, code }) => (\n          <TextField\n            key={`modal-input-${code}`}\n            className={classes.input}\n            label={name}\n            InputLabelProps={{\n              shrink: true,\n            }}\n            placeholder={`Type ${name} text`}\n            variant=\"outlined\"\n            value={text}\n            onChange={(e) => onLangChange(e, \"translationData\", key)}\n            fullWidth\n          />\n        ))}\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={handleSave} color=\"primary\" variant=\"contained\">\n          Save\n        </Button>\n        <Button onClick={handleClose} color=\"primary\" variant=\"outlined\">\n          Close\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default TranslatorModal;\n","export const translate = (sourceText, sourceLang, targetLang) =>\n  new Promise((resolve, reject) => {\n    const url = `https://api.mymemory.translated.net/get?q=${encodeURI(\n      sourceText\n    )}!&langpair=${sourceLang}|${targetLang}`;\n\n    // \"https://translate.googleapis.com/translate_a/single?client=gtx&sl=\" +\n    // sourceLang +\n    // \"&tl=\" +\n    // targetLang +\n    // \"&dt=t&q=\" +\n    // encodeURI(sourceText);\n\n    fetch(url)\n      .then((response) => response.json())\n      .then((data) => resolve(data.responseData.translatedText));\n  });\n","export const formatInsertQuery = (\n  languageId,\n  languageName,\n  fileType,\n  translationKey,\n  translationValue\n) => {\n  let query = `INSERT INTO languages_translations (language_id, languages_translations_file, languages_translations_key, languages_translations_value, languages_translations_oryginal_value, languages_translations_strtr_keys) VALUES ('${languageId}', '${languageName}${fileType}', '${translationKey}', '${translationValue}', '${translationValue}', '${translationKey}');`;\n\n  return query;\n};\n\nexport const formatUpdateQuery = (\n  languageId,\n  languageName,\n  fileType,\n  translationKey,\n  translationValue\n) => {\n  let query = `UPDATE languages_translations SET languages_translations_oryginal_value = '${translationValue}', languages_translations_value = '${translationValue}' WHERE languages_translations_key = '${translationKey}' AND language_id = '${languageId}';`;\n\n  return query;\n};\n\nexport const formatDeleteQuery = (keys) => {\n  const formattedKeys = keys.map((key) => `'${key}'`).join(\",\");\n  const query = `DELETE FROM \\`languages_translations\\` WHERE \\`languages_translations_key\\` IN(${formattedKeys});`;\n\n  return query;\n};\n\nexport const returnQueryBlock = (queries) => {\n  const joinedQueries = queries.join(\"\\n\\t\");\n\n  const block = `\n  $sql= \"${joinedQueries}\";\n  $this->execute($sql);`;\n\n  return block;\n};\n\nexport const returnFunction = (name, blocks) => {\n  const joinedBlocks = blocks.join(\"\\n\\n\");\n\n  const func = `\n  public function ${name}()\n  { \n      ${joinedBlocks}\n  }\n  `;\n\n  return func;\n};","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Typography, TextareaAutosize, Button, Fab } from \"@material-ui/core\";\nimport FileCopy from \"@material-ui/icons/FileCopy\";\nimport copy from \"copy-to-clipboard\";\n\nconst useStyles = makeStyles((theme) => ({\n  textarea: {\n    width: \"100%\",\n  },\n  title: {\n    display: \"flex\",\n    justifyContent: \"space-between\",\n  },\n}));\n\nconst TranslatorOutput = ({ output }) => {\n  const classes = useStyles();\n\n  const onCopy = () => {\n    copy(output);\n  };\n\n  return (\n    <div className=\"TranslatorOutput\">\n      <div className={classes.title}>\n        <Typography display=\"inline\">Output</Typography>\n        <Fab size=\"small\" onClick={onCopy}>\n          <FileCopy fontSize=\"small\" />\n        </Fab>\n      </div>\n      <div>\n        <Typography>Run <code>docker-compose exec web bash</code></Typography>\n        <Typography>Go to <code>/lib/tools</code></Typography>\n        <Typography>Run <code>php vendor/bin/phinx create {\"<MigrationName>\"}</code></Typography>\n        <Typography>Paste commands into created file</Typography>\n        <Typography>Run <code>php vendor/bin/phinx migrate</code></Typography>\n      </div>\n      <TextareaAutosize\n        value={output}\n        rowsMin={3}\n        className={classes.textarea}\n      />\n    </div>\n  );\n};\n\nexport default TranslatorOutput;\n","import React, { useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Typography, TextField } from \"@material-ui/core\";\nimport {\n  defaultSource,\n  defaultLanguages,\n  fileType,\n  defaultFileType,\n  defaultActions,\n  defaultCopySource,\n} from \"consts/consts\";\nimport TranslatorTable from \"components/TranslatorTable/TranslatorTable\";\nimport TranslatorOptions from \"components/TranslatorOptions/TranslatorOptions\";\nimport TranslatorActions from \"components/TranslatorActions/TranslatorActions\";\nimport TranslatorModal from \"components/TranslatorModal/TranslatorModal\";\nimport { translate } from \"utils/translate\";\nimport {\n  formatInsertQuery,\n  formatDeleteQuery,\n  returnQueryBlock,\n  returnFunction,\n  formatUpdateQuery,\n} from \"utils/formatters\";\nimport TranslatorOutput from \"components/TranslatorOutput/TranslatorOutput\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    padding: theme.spacing(1),\n  },\n}));\n\nconst defaultModalData = {\n  action: defaultActions[0],\n  key: \"\",\n  translationData: [],\n  originalData: [],\n};\n\nconst Translator = (props) => {\n  const classes = useStyles();\n\n  const [fileType, setFileType] = useState(defaultFileType);\n  const [source, setSource] = useState(defaultSource);\n  const [copySource, setCopySource] = useState(defaultCopySource);\n  const [languages, setLanguages] = useState(defaultLanguages);\n  const [translations, setTranslations] = useState([]);\n\n  const [modalData, setModalData] = useState(defaultModalData);\n  const [isModal, setIsModal] = useState(false);\n\n  const [output, setOutput] = useState(\"\");\n\n  const onSettingChange = (key, value) => {\n    const newLanguages = [...languages];\n    const langId = languages.findIndex((el) => el.key === key);\n\n    newLanguages[langId] = {\n      ...languages[langId],\n      setting: value,\n    };\n\n    setLanguages(newLanguages);\n  };\n\n  const onSourceChange = (code) => {\n    const lang = languages.find((el) => el.code === code);\n\n    onSettingChange(lang.key, \"input\");\n    setSource(code);\n  };\n\n  const onCopySourceChange = (code) => {\n    setCopySource(code);\n  };\n\n  const onOpenModal = () => {\n    const inputLanguages = languages.filter(\n      ({ setting }) => setting === \"input\"\n    );\n\n    const translationData = inputLanguages.map((lang) => {\n      return {\n        ...lang,\n        text: \"\",\n      };\n    });\n\n    const originalData = languages.map((lang) => {\n      return {\n        ...lang,\n        text: \"\",\n      };\n    });\n\n    const newModalData = {\n      ...defaultModalData,\n      translationData,\n      originalData,\n    };\n\n    setModalData(newModalData);\n    setIsModal(true);\n  };\n\n  const onAddTranslation = async (data) => {\n    const modalTranslationData = data.translationData;\n\n    const src = modalTranslationData.find(({ code }) => code === source);\n    const srcText = src.text;\n\n    const pendingTranslationData = languages.map(async (lang) => {\n      const langModalData = modalTranslationData.find((item) => {\n        return item.key === lang.key;\n      });\n\n      let text = \"\";\n      if (!!langModalData) {\n        text = langModalData.text;\n      } else if (lang.setting === \"auto\") {\n        text = await translate(srcText, source, lang.code);\n      } else if (lang.setting === \"copy\") {\n        text = \"--copy-text--\";\n      }\n\n      return {\n        ...lang,\n        text,\n      };\n    });\n\n    const rawTranslationData = await Promise.all(pendingTranslationData);\n\n    const copySourceTxt = rawTranslationData.find(\n      ({ code }) => code === copySource\n    ).text;\n\n    const translationData = rawTranslationData.map((lang) => {\n      let { text } = lang;\n      if (text === \"--copy-text--\") {\n        text = copySourceTxt;\n      }\n      return {\n        ...lang,\n        text,\n      };\n    });\n\n    setTranslations([\n      ...translations,\n      {\n        ...data,\n        translationData,\n      },\n    ]);\n  };\n\n  const onEditTranslation = () => {};\n\n  const onExport = () => {\n    let upBlocks = [];\n    let downBlocks = [];\n    let insertedKeys = [];\n    let updatedKeys = [];\n\n    let output = \"\";\n\n    for (let trans of translations) {\n      const { action, key, translationData, originalData } = trans;\n\n      let transUpQueries = [];\n      let transDownQueries = [];\n\n      if (action === \"INSERT\") {\n        insertedKeys.push(key);\n\n        for (let lang of translationData) {\n          const newQuery = formatInsertQuery(\n            lang.key,\n            lang.name,\n            fileType,\n            key,\n            lang.text\n          );\n\n          transUpQueries.push(newQuery);\n        }\n\n        upBlocks.push(returnQueryBlock(transUpQueries));\n      } else if (action === \"UPDATE\") {\n        translationData.forEach((lang, index) => {\n          const originalLang = originalData[index];\n\n          if (originalLang.text && lang.text !== originalLang.text) {\n            const newUpQuery = formatUpdateQuery(\n              lang.key,\n              lang.name,\n              fileType,\n              key,\n              lang.text\n            );\n\n            const newDownQuery = formatUpdateQuery(\n              originalLang.key,\n              originalLang.name,\n              fileType,\n              key,\n              originalLang.text\n            );\n\n            transUpQueries.push(newUpQuery);\n            transDownQueries.push(newDownQuery);\n          }\n        });\n\n        upBlocks.push(returnQueryBlock(transUpQueries));\n        downBlocks.push(returnQueryBlock(transDownQueries));\n      }\n    }\n\n    const deleteInsertedBlock = returnQueryBlock([\n      formatDeleteQuery(insertedKeys),\n    ]);\n\n    downBlocks.push(deleteInsertedBlock);\n\n    output =\n      returnFunction(\"up\", upBlocks) +\n      \"\\n\" +\n      returnFunction(\"down\", downBlocks);\n\n    setOutput(output);\n  };\n\n  return (\n    <div className={classes.root}>\n      <TranslatorOptions\n        {...{\n          languages: defaultLanguages,\n          source,\n          onSourceChange,\n          copySource,\n          onCopySourceChange,\n          fileType,\n          setFileType,\n        }}\n      ></TranslatorOptions>\n      <TranslatorTable\n        {...{ source, languages, onSettingChange, translations }}\n      ></TranslatorTable>\n      <TranslatorActions {...{ onOpenModal, onExport }} />\n      {output && <TranslatorOutput {...{ output }} />}\n      <TranslatorModal\n        {...{ isModal, modalData, setIsModal, onAddTranslation }}\n      />\n    </div>\n  );\n};\n\nexport default Translator;\n","import React from \"react\";\nimport \"fontsource-roboto\";\nimport \"./App.css\";\nimport Translator from \"containers/Translator/Translator\";\nimport { translate } from \"utils/translate\";\n\nfunction App() {\n  const sourceLang = \"pl\";\n  const targetLang = \"en\";\n  const sourceText = \"Witaj świecie\";\n\n  const getTranslation = async () => {\n    const translatedText = await translate(sourceText, sourceLang, targetLang);\n    console.log(translatedText);\n  };\n\n  // getTranslation();\n\n  return (\n    <div className=\"App\">\n      <Translator></Translator>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}